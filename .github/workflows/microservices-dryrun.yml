name: microservices-dryrun

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  dryrun:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (no push)
        working-directory: app
        run: |
          set -euo pipefail
          docker build -t app:dryrun .
          docker save app:dryrun -o ../app-image.tar
          echo "OK: built local image app:dryrun and saved to app-image.tar"

      - name: Trivy scan (image) non-blocking
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: app:dryrun
          format: "table"
          exit-code: "0"
          vuln-type: "os,library"
          ignore-unfixed: true

      - name: Validate Dockerfile best practices
        run: |
          set -euo pipefail
          grep -q "^USER " app/Dockerfile || (echo "::error::Dockerfile missing USER" && exit 1)
          ! grep -E "^USER\\s+root\\b" app/Dockerfile || (echo "::error::Dockerfile runs as root" && exit 1)
          grep -q "^HEALTHCHECK " app/Dockerfile || (echo "::error::Dockerfile missing HEALTHCHECK" && exit 1)
          echo "OK: Dockerfile best practices enforced"

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Helm lint and render (no cluster)
        run: |
          set -euo pipefail
          helm lint helm/app
          helm template ms helm/app -f helm/app/values.yaml > helm/rendered.yaml
          head -n 40 helm/rendered.yaml

      - name: Gate - probes must exist in rendered manifests
        run: |
          set -euo pipefail
          grep -q "livenessProbe" helm/rendered.yaml || (echo "::error::livenessProbe missing" && exit 1)
          grep -q "readinessProbe" helm/rendered.yaml || (echo "::error::readinessProbe missing" && exit 1)
          echo "OK: Probes present in Helm output"

      - name: Ensure jq and Terraform
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform fmt/validate
        run: |
          terraform -chdir=terraform init -backend=false
          terraform -chdir=terraform fmt -recursive
          terraform -chdir=terraform validate

      - name: Terraform plan (no apply)
        env:
          AWS_ACCESS_KEY_ID: dummy
          AWS_SECRET_ACCESS_KEY: dummy
          AWS_REGION: us-east-1
        run: |
          set -euo pipefail
          terraform -chdir=terraform init -backend=false
          terraform -chdir=terraform plan -refresh=false \
            -var-file=../tfvars/minimal.tfvars \
            -out=tfplan.binary
          terraform -chdir=terraform show -json tfplan.binary > tfplan.json
          terraform -chdir=terraform show tfplan.binary | sed -n "1,120p"

      - name: Gate - require tags on created AWS resources
        run: |
          set -euo pipefail
          REQUIRED='["Project","Environment","Owner","CostCenter"]'
          MISSING=$(
            jq -r --argjson req "$REQUIRED" '
              def ensure_obj(x): if (x|type)=="object" then x else {} end;
              [
                .resource_changes[]?
                | select(.change.actions | index("create"))
                | . as $rc
                | (ensure_obj($rc.change.after) | (.tags_all // .tags // {})) as $tags
                | {addr: $rc.address, type: $rc.type,
                   missing: [$req[] | select( ($tags[.] // null) == null )]}
                | select(.missing | length > 0)
                | "\(.addr) (\(.type)) missing: \(.missing|join(", "))"
              ] | .[]
            ' tfplan.json
          )
          if [ -n "$MISSING" ]; then
            echo "::error::Missing required tags:"
            echo "$MISSING"
            exit 1
          else
            echo "OK: required tags present"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ms-dryrun-artifacts
          path: |
            app-image.tar
            helm/rendered.yaml
            terraform/tfplan.binary
            tfplan.json
          if-no-files-found: error

